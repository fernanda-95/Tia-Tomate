@charset "UTF-8";
/**
  * Patrón 7-1
  *
  * Esta es la estructura del patrón 7-1 utilizado en DesafíoLatam
  * para la enseñanza del uso correcto de patrones dentro de CSS y
  * también para la utilización de éste dentro de estructuras de 
  * trabajo colaborativo.
  *
  * @author Cristóbal Domínguez <cristobald@me.com>
  * @since 1.1
  *
  */
/*
 *
 * La carpeta abstracts/ reune todas las herramientas de SASS para el proyecto.
 * Cada variable global, función, mixin o placeholder debería estar aquí dentro.
 * 
 * La regla de oro para esta carpeta es que no deberá imprimir ni una sola línea
 * de código en el momento de la compilación del CSS. Nada como los helpers de Sass.
 * 
 * Cuando se trabaja en un proyecto muy grande con muchos archivos abstracts, podría
 * ser más interesante agruparlos por tópicos en vez de por tipo. Un ejemplo sería
 * crear las instancias typography (_typography.scss), theming (_theming.scss), etc.
 * Cada archivo contendría todos los helpers relacionados a esa instancia: variables, 
 * functions, mixins y placeholders. Hacerlo así podría hacer el código más sencillo de 
 * de mantener, especialmente cuando los archivos empiezan a crecer mucho.
 * 
 * Nota:
 * La carpeta abstracts/ podría llamarse utilities/ o helpers/, dependiendo de lo que
 * se prefiera.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Este archivo contiene las referencias del código boilerplate de tu proyecto.
 * Aquí podrás encontrar referencias al archivo _reset.scss, a las tipografías
 * y probablemente algún otro archivo de estilos que defina de una forma estándard
 * los estilos de elementos usados en HTML.
 *
 *
 * Nota: 
 * Si tu proyecto usa muchas animaciones, deberías considerar agregar dentro de
 * esta carpeta un archivo /_animations.scss que contenga las definiciones de los
 * @keyframes de todas tus animaciones.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
body {
  font-family: 'Raleway', sans-serif;
  margin: 0; }

.container, .main_header {
  max-width: 1000px;
  margin: 0 auto;
  padding: .5em; }

/*
 *
 * En sitios/aplicaciones grandes es usual tener distintos temas o 
 * themes implementados. Hay diferentes caminos para lidiar con ese
 * problema, sin embargo uno de los más sencillos, a mi parecer, sería
 * tener cada theme dentro de su carpeta.
 * 
 * Nota:
 * La creación de esta carpeta es muy específica a cada proyecto, 
 * probablemente la mayoría de los sitio/aplicaciones no la necesitarán.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Esta carpeta contiene todo lo que hace relación con el sitio web o la aplicación.
 * Aquí encontrarás los estilos para las partes principales del sitio (header, footer, 
 * navigation, sidebar, etc), el sistema de grillas o incluso los estilos de los formularios
 *
 *
 * Nota:
 * La carpeta layout/ también podría ser llamada partials/, dependiendo de la 
 * preferencia del desarrollador.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 * 
 * Esta carpeta fue creada para componentes o módulos pequeños como por ejemplo: 
 * sliders, loaders, widgets, etc. A diferencia de la carpeta layout/ donde almacenaremos
 * los componentes que definan el wireframe del sitio/aplicación, aquí encontraremos
 * componentes que aportarán más contenido que una estructura visual.
 * 
 * Usualmente deberían haber muchos archivos en components/ debido a que los 
 * sitios/aplicaciones se empezaron a crear en base a pequeños módulos de código.
 * 
 * Nota:
 * Esta carpeta también se podría llamar modules/, dependiendo de cómo tu la prefieras.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
.main_header__link {
  height: 50px;
  display: block; }
.main_header__img {
  height: 100%; }

.highlight, .highlight--hero {
  background-color: #e56353;
  color: #fff;
  text-align: center;
  padding: 2em; }
  .highlight__title, .highlight__title--text-default {
    font-size: 3.5em;
    font-weight: bolder;
    margin: 0;
    text-transform: uppercase; }
    .highlight__title--light {
      text-transform: none;
      font-weight: lighter;
      display: block; }
    .highlight__title--text-default {
      text-transform: none;
      font-size: 2.5em; }
  .highlight__button {
    background: #fff;
    border-radius: 1.25em;
    color: #686963;
    display: inline-block;
    font-size: 1.5rem;
    font-weight: bolder;
    margin-top: 1em;
    padding: .625em 3.15em;
    text-transform: uppercase;
    text-decoration: none; }
  .highlight--hero {
    padding: 10em 0; }

.product, .product--gray {
  color: #686963;
  padding: 3em; }
  .product__img {
    max-width: 100%; }
  .product__title, .us__title {
    font-weight: 700;
    font-size: 2em;
    text-align: center; }
  .product__text, .us__text {
    font-weight: 200;
    margin-left: auto;
    margin-right: auto;
    max-width: 700px; }
  .product--gray {
    background: #686963;
    color: #fff; }

.testimony {
  padding: 3em 0; }

.us {
  color: #686963; }
  .us__img {
    width: 100%; }
    .us__img-container {
      max-width: 350px;
      margin-left: auto;
      margin-right: auto; }

.main_footer {
  background: #686963;
  padding: 4.5em;
  text-align: center; }
  .main_footer__link {
    width: 150px;
    display: inline-block; }
  .main_footer__img {
    width: 100%; }

/*
 *
 * Si prefieres estilos de páginas específicas, es mejor ponerlos en la carpeta pages/.
 * Por cierto, es común tener estilos muy específicos para cada página, como por ejemplo:
 * home, de ahí la necesidad de crear un archivo _home.scss dentro de pages/.
 * 
 * Nota:
 * Dependiendo del proceso de tu desarrollo, estos archivos podrían ser cargados de forma
 * paralela al archivo de estilos principal, evitando juntarlos con los del estilo principal.
 * Sin embargo es una decisión de cada uno o de cada proyecto.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */

/*# sourceMappingURL=style.css.map */
